name: Build and Deploy docker image in ECS with GitHub action

on:
  push:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    environment: dev
     
    env:
      LOG_FILE: build-report.log
      MAIL_RECIPIENTS: ${{ vars.MAIL_RECIPIENTS }}
      BRANCH_NAME: ${{ github.ref_name }}
      DOCKER_ENV: ${{ vars.DOCKER_ENV }}
      AWS_ENV: ${{ vars.AWS_ENV }}
      GIT_PROJECT_SLUG: ${{ vars.GIT_PROJECT_SLUG }}
      GIT_TEAM_NAME: ${{ vars.GIT_TEAM_NAME }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
    

    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        continue-on-error: true
        with:
          working-directory: ./terraform
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'

      - name: Run Checkov IaC scanner
        uses: bridgecrewio/checkov-action@master
        continue-on-error: true
        with:
          directory: ./terraform
          framework: terraform

  build-and-deploy:
    needs: [security-scan]
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref_name == 'deel_ip_test' || github.ref_name == 'main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug secrets
      run: |
        echo "Branch: ${{ github.ref_name }}"
        echo "AWS_ACCESS_KEY_ID set: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
        echo "AWS_SECRET_ACCESS_KEY set: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
        
    - name: Test AWS credentials
      run: aws sts get-caller-identity

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        aws-region: eu-west-2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    
    - name: Terraform Plan
      working-directory: ./terraform
      env:
        TF_VAR_image_uri: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ github.sha }}
      run: terraform plan 2>&1 | tee plan.log

    - name: Upload Terraform Plan Log
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-log  
        path: ./terraform/plan.log
    
    - name: Terraform Apply
      working-directory: ./terraform
      env:
        TF_VAR_image_uri: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ github.sha }}
      run: terraform apply -auto-approve 2>&1 | tee terraform-apply.log

    - name: Upload Terraform Apply Log
      uses: actions/upload-artifact@v4
      with:
        name: terraform-apply-log
        path: ./terraform/terraform-apply.log