# Created this file for performing destroy operation of infra as it is not safe to do in CI/CD pipeline. So it is for personal use. commented some code for future use. Also added import code for existing resources if needed in future.
# Also added force-unlock code for terraform state locking issue if it happens in future.

name: Destroy Infrastructure

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1
      - name: Create DynamoDB table for state locking
        continue-on-error: true
        run: |
            aws dynamodb create-table \
            --table-name deel-test-app-bucket-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region eu-west-2
    
      
      

      - name: Terraform Init
        working-directory: ./terraform
        timeout-minutes: 5
        run: terraform init -backend-config="envVars/dev/backend.tf" -lock=false

    #   - name: Force unlock state
    #     working-directory: ./terraform
    #     continue-on-error: true
    #     run: |
    #         aws dynamodb scan --table-name deel-test-app-bucket-locks --query 'Items[0].LockID.S' --output text | xargs -r terraform force-unlock -force      
      
      - name: Force unlock state
        working-directory: ./terraform
        continue-on-error: true
        run: terraform force-unlock -force fcacfb47-2062-9dec-720d-40c31ba51730



    #   - name: Import Existing Resources
    #     working-directory: ./terraform
    #     continue-on-error: true
    #     run: |
    #         echo "Importing S3 Bucket..."
    #         terraform import aws_s3_bucket.deel_test_app_bucket deel-test-app-bucket-dev || echo "S3 bucket already imported"

    #         echo "Importing ECR Repository..."
    #         terraform import aws_ecr_repository.deel_test_ip_app deel-test-app || echo "ECR repo already imported"

    #         echo "Importing ALB Target Group..."
    #         TG_ARN=$(aws elbv2 describe-target-groups --names deel-test-app-tg --region eu-west-2 --query 'TargetGroups[0].TargetGroupArn' --output text)
    #         terraform import aws_lb_target_group.deel_ip_app $TG_ARN || echo "Target group already imported"

    #         echo "Importing CloudWatch Log Group..."
    #         terraform import aws_cloudwatch_log_group.ecs_log_group /ecs/deel-test-app || echo "Log group already imported"

    #         echo "Importing IAM Role..."
    #         terraform import aws_iam_role.ecs_task_execution_role deel-test-app-ecs-task-execution-role || echo "IAM role already imported"

    #         echo "Importing Security Groups..."
    #         ECS_SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=deel-test-app-ecs-tasks*" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
    #         if [ ! -z "$ECS_SG_ID" ] && [ "$ECS_SG_ID" != "None" ]; then
    #           terraform import aws_security_group.ecs_tasks $ECS_SG_ID || echo "ECS security group already imported"
    #         fi

    #         ALB_SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=deel-test-app-alb*" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
    #         if [ ! -z "$ALB_SG_ID" ] && [ "$ALB_SG_ID" != "None" ]; then
    #           terraform import aws_security_group.alb $ALB_SG_ID || echo "ALB security group already imported"
    #         fi

    #         echo "Importing Load Balancer..."
    #         ALB_ARN=$(aws elbv2 describe-load-balancers --names deel-test-app-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "")
    #         if [ ! -z "$ALB_ARN" ] && [ "$ALB_ARN" != "None" ]; then
    #           terraform import aws_lb.deel_ip_app_lb $ALB_ARN || echo "Load balancer already imported"
    #         fi

    #         echo "Importing ECS Cluster..."
    #         terraform import aws_ecs_cluster.main deel-test-app-cluster || echo "ECS cluster already imported"

    #         echo "Importing ECS Service..."
    #         terraform import aws_ecs_service.deel_ip_app deel-test-app-cluster/deel-test-app || echo "ECS service already imported"




      - name: Terraform Plan
        working-directory: ./terraform
        continue-on-error: true
        run: terraform plan -var-file="envVars/dev/dev.tfvars" 2>&1


    #   - name: Terraform Destroy
    #     working-directory: ./terraform
    #     run: terraform destroy -var-file="envVars/dev/dev.tfvars" -auto-approve 2>&1 | tee terraform-destroy.log

    #   - name: Upload Destroy Log
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: terraform-destroy-log
    #       path: ./terraform/terraform-destroy.log
